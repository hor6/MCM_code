#This code was used in the Polarix trial. This codes are the same used in the  Brim3 example.
#Weibull and log-logistic did not converge so they were excluded 
# The code for Pola+R-CHP and R-CHOP were the same, the difference would be the selection of ARMCD.x=="ARM B" for R-CHOP. In the R-CHOP we included "gengamma"(gen gamma did not converge for Pola+R-CHP)
# The code for OS is the same but since it was not possible to estimate  the long-term survival fraction using the OS data due to few events in the trial). The long-term remission fraction estimated in PFS were used to extrapolate the OS curves.
# All the background mortality data came from the Human Mortality Database 
#The codes used in the Polarix trial similarly to  Brim3 has two parts: (1) Generate the long-term remission fraction using the trial data; (2) use the same long-term remission fraction to extrapolate to extrapolate the trial data and also compare the extrapolation curves with different long-term remission fractions 


#Load packages and custom functions
require(flexsurv)
require(MASS)
require(optimx)
library(dplyr)
library(RCurl)
source("functions/funs_hazard.R")
source("functions/funs_likelihood.R")


PFS_Polarix_data<-filter(Polarix_database, PARAMCD =="PFS",STRAT2.x=="IPI 3-5") #PARAMCD =="PFS" for PFS and PARAMCD =="OS" for OS
PFS_polarix_data<-filter(Polarix_database,  ARMCD.x=="ARM A" )# "Arm A" to select Pola+R-CHP arm and "ARM B" to select R-CHOP

# Define models and data containers ---------------------------------------

# Parametric models to be considered in estimation ====

models <- c("exponential","lognormal","gompertz","gamma") #For Pola+R-CHP
#models <- c("exponential","lognormal","gengamma","gompertz","gamma") # For R-CHOP

N_m <- length(models)


# Initialize containers for modelling outputs ====
fsr_fits_ <- list()
opt_obj_ <- list()

St_models <- list()
y_models <- list()
St_base_models <- list()

St_models <- list()
y_models <- list()
St_base_models <- list()
St_models_cures <- list()
y_models_cures <- list()
St_base_models_cures <- list()

est_cure <- data.frame(
  function_type = character(N_m), cure_rate = numeric(N_m),
  stderr = numeric(N_m), lower.ci = numeric(N_m),
  upper.ci = numeric(N_m), AIC = numeric(N_m),
  BIC = numeric(N_m), stringsAsFactors = FALSE
)

# Cure fraction values for later comparison ===
cure_vals <- c(0.717164522117168, 0.771264846353907,0, 0.766213856506153)#long-term remission fraction previously estimate with PART 1 of this code that is going to be use in the PART2 to extrapolate the curves
#cure_vals <- c(0.553179669401544, 0.626730473967439, 0.589762498223199,0, 0.649583747807207)# For R-CHOP

N_c <- length(cure_vals)

# Initialize containers for comparison of cure fraction values
parms_fit_frame <- list()
init_pos <- list()

AIC_cures <- data.frame(matrix(ncol = N_c + 1, nrow = N_m))
colnames(AIC_cures) <- c("Model", paste0("Cure_", cure_vals * 100))

AREA_cures <- data.frame(matrix(ncol = N_c * 2 + 3, nrow = N_m))
colnames(AREA_cures) <- c("Model",
                          paste0("Cure_", cure_vals * 100),
                          paste0("Cure_", cure_vals * 100, "_res"),
                          "No_cure", "No_cure_res")

# Function to calculate area under survival curve
area_surv <- function(x, y) {
  step <- x[2] - x[1]
  len <- length(y)
  val <- sum(y[2:(len - 1)])
  val <- val + 0.5 * (y[1] + y[len])
  val <- step * val
  
  return(val)
}

#PART1: Estimate the long-term remission fraction
# Start analysis ----------------------------------------------------------

# Estimate the Kaplan-Meier curve ====
KM <- survfit(Surv(as.numeric(TIME), CNSR) ~ 1, data = PFS_polarix_data)

# Calculate the hazard rates and mean survival ====
hazard_out <- hazard_time(
  table_ = PFS_polarix_data,
  evttme = "TIME",
  sex = "SEX.x",
  age = "AAGE.x",
  year = "YEAR",
  country_trial = "COUNTRY.x",
  country_output = NULL
)
###############################################################################
## Loop over subjects in the trial

N_p<- length(PFS_polarix_data[,"SEX.x"])
xty <- seq(0, 30, by = 0.2)
rate_vec <- matrix(0,nrow = N_p, ncol = 1)
for (i in 1:N_p) {
  country_in_use <- as.character(PFS_polarix_data[i, "COUNTRY.x"])
  year_in_use <- PFS_polarix_data[i, "YEAR"]
  gender_in_use <- PFS_polarix_data[i, "SEX.x"]
  
  ## Load mortality tables
  ### Men
  if (gender_in_use == "MALE" | gender_in_use == "M") {
    table_in_use <- read.csv(paste0("data/mortality/", country_map[[country_in_use]],
                                    "/Male/Mortality.csv", sep = ""))
    max_year <- max(table_in_use$Year) ## select max year if trial year missing
    if (year_in_use > max_year) {
      year_in_use <- max_year
    }
    table_in_use <- subset(table_in_use, Year == year_in_use)
    rate_vec[i] <- rate_c_years(as.numeric(PFS_polarix_data[i, "AAGE.x"]) +
                                  as.numeric(PFS_polarix_data[i, "TIME"]), table_in_use)
    scvy_all <- Surv_cv_years(as.numeric(PFS_polarix_data[i, "AAGE.x"]) +
                                xty, table_in_use)
    
  }
  
  ### Women
  if (gender_in_use == "FEMALE" | gender_in_use == "F") {
    table_in_use <- read.csv(paste0("data/mortality/", country_map[[country_in_use]],
                                    "/Female/Mortality.csv", sep = ""))
    max_year <- max(table_in_use$Year)
    if (year_in_use > max_year) {
      year_in_use <- max_year
    }
    table_in_use <- subset(table_in_use, Year == year_in_use)
    rate_vec[i] <- rate_c_years(as.numeric(PFS_polarix_data[i, "AAGE.x"]) +
                                  as.numeric(PFS_polarix_data[i, "TIME"]), table_in_use)
    scvy_all <- Surv_cv_years(as.numeric(PFS_polarix_data[i, "AAGE.x"]) + xty, table_in_use)
    
  }
  ret_obj <- list()
  ret_obj$rate_vec <- rate_vec
  PFS_polarix_data$rate_mod <-rate_vec
}
########################################################################

surv_mean <- colSums(hazard_out$surv_mat, na.rm = TRUE) /
  length(which(!is.na(hazard_out$surv_mat[, 1])))
xty <- hazard_out$xty # Modeling time horizon


# Estimate the various models specified above

for (i in 1:N_m) {# CHECK THIS
  # Calculate model fits
  print(models[i])
  print("pre fit")
  fsr_fits_[[i]] <- flexsurvreg(Surv(as.numeric(TIME), CNSR) ~ 1,
                                data = PFS_polarix_data, dist = models[i])
  print("post fit")
  fsr_use <- fsr_fits_[[i]]$res[, "est"] 
  len <- length(fsr_use)
  
  # Run optimization
  opt_obj_[[i]] <- try(optim(
    par = c(fsr_use, 0.23), # dummy starting parameter for the cure fraction
    ll.mix, # 
    table = PFS_polarix_data,
    time_col = "TIME",
    cen_col = "CNSR",
    rate_col = "rate_mod",
    method = "L-BFGS-B",
    obj = fsr_fits_[[i]],
    hessian = TRUE,
    lower = c(rep(-Inf, length(fsr_use)), 0),
    upper = c(rep(Inf, length(fsr_use)), 1)
  ),
  silent = FALSE)
  print("optimization")
  invHuse <- ginv(opt_obj_[[i]]$hessian)
  
  # Store results in predefined containers
  est_cure$function_type[i] <- models[i]
  est_cure$cure_rate[i]     <- opt_obj_[[i]]$par[length(fsr_use) + 1]
  est_cure$stderr[i]        <- sqrt(invHuse[length(fsr_use) + 1,
                                            length(fsr_use) + 1])
  est_cure$lower.ci[i]      <- est_cure$cure_rate[i] - 
    qt(0.975, fsr_fits_[[i]]$N) * est_cure$stderr[i]
  est_cure$upper.ci[i]      <- est_cure$cure_rate[i] + 
    qt(0.975, fsr_fits_[[i]]$N) * est_cure$stderr[i]
  est_cure$AIC[i]           <- 2 * (length(fsr_use) + 1) + 
    2 * opt_obj_[[i]]$value
  est_cure$BIC[i]           <- (length(fsr_use) + 1) *
    log(fsr_fits_[[i]]$N) + 2 * opt_obj_[[i]]$value
  
  St_     <- do.call(fsr_fits_[[i]]$dfns$p,
                     args = c(as.list(opt_obj_[[i]]$par[1:(len)]),
                              list(q = xty, lower.tail = FALSE)))
  St_base <- do.call(fsr_fits_[[i]]$dfns$p,
                     args = c(as.list(fsr_fits_[[i]]$res[, "est"]),
                              list(q = xty, lower.tail = FALSE)))
  y_      <- surv_mean * (est_cure$cure_rate[i] +
                            (1 - est_cure$cure_rate[i]) * St_)
  
  St_models_cures[[i]]      <- St_
  y_models_cures[[i]]       <- y_
  St_base_models_cures[[i]] <- St_base
}

#PART2: use the cure fraction to inform the extrapolation of the curves

# Kaplan-Meier curve
plot(KM, conf.int = F, lwd = 5, xlab = "Time (years)",
     ylab = "Survival proportion", xlim = c(0, 10), lty = 2,
     cex.axis = 1.5, cex.lab = 1.5)

# Parametric models
for (i in 1:5) {
  lines(xty, y_models_cures[[i]], col = palette()[i + 1], lwd = 2)
}
lines(KM, conf.int = F, lwd = 5, xlab = "Time (years)", lty = 2)
legend("topright", c("KM", models[1:7]), col = c("black", palette()[2:8]),
       lwd = 4, lty = c(2, rep(1, 7)), cex = 1.5)
dev.off()


# Compare different long-term remission fractions  ---------------------------

## For each cure fraction value, initialise data frame ====
for (j in 1:N_c) {
  parms_fit_frame[[j]] <- data.frame("Function" = character(0),
                                     "Param_Name" = character(0),
                                     "Value_mix" = numeric(0),
                                     "Cov_mix_p1" = numeric(0),
                                     "Cov_mix_p2" = numeric(0),
                                     "Cov_mix_p3" = numeric(0),
                                     "Cov_mix_PI" = numeric(0),
                                     stringsAsFactors = FALSE)
  init_pos[[j]] <- 1
}

## Calculate fits for each parametric model and cure fraction value
for (i in 1:N_m) {
  
  fsr_fits_ <- flexsurvreg(Surv(as.numeric(TIME), CNSR) ~ 1,
                           data = PFS_polarix_data, dist = models[i])
  surv_fits_ <- survfit(Surv(as.numeric(TIME), CNSR) ~ 1,
                        data = PFS_polarix_data)
  opt_obj_f_ <- list()
  
  for (j in 1:N_c) {
    fsr_use <- fsr_fits_$res[, "est"]
    opt_obj_f_[[j]] <- try(optim(
      par = c(fsr_use), 
      ll.mix_f,
      pi_ = cure_vals[j],
      table = PFS_polarix_data,
      time_col = "TIME",
      cen_col = "CNSR",
      rate_col = "rate_mod",
      method = "BFGS",
      obj = fsr_fits_,
      hessian = TRUE
    ),
    silent = FALSE
    )
    if (1) {
      print(init_pos[[j]])
      invHuse_ <- ginv(opt_obj_f_[[j]]$hessian)
      
      parm_names <- rownames(fsr_fits_$res)
      print(parm_names)
      row_util <- length(parm_names)
      miu <- models[i]
      parms_fit_frame[[j]][init_pos[[j]]:(init_pos[[j]] + row_util),
                           "Function"] <- miu
      parms_fit_frame[[j]][init_pos[[j]]:(init_pos[[j]] + row_util - 1),
                           "Param_Name"] <- parm_names
      parms_fit_frame[[j]][(init_pos[[j]] + row_util),
                           "Param_Name"] <- "PI"
      parms_fit_frame[[j]][init_pos[[j]]:(init_pos[[j]] + row_util - 1),
                           "Value_mix"] <- opt_obj_f_[[j]]$par
      parms_fit_frame[[j]][(init_pos[[j]] + row_util),
                           "Value_mix"] <- 0
      parms_fit_frame[[j]][init_pos[[j]]:(init_pos[[j]] + row_util - 1),
                           4:(4 + row_util - 1)] <- invHuse_
      init_pos[[j]] <- init_pos[[j]] + row_util + 1
    }
  }
  
  lx <- length(xty)
  St_ <- list()
  St_base_ <- list()
  y_ <- list()
  cure_strs <- paste0("Cure_", cure_vals * 100)
  
  colors__ <- rainbow(N_c)
  
  plot(fsr_fits_, xlim = c(0, 25), main = "   ",
       xlab = "Time (years)", ylab = "Survival proportion",
       est = FALSE, ci = FALSE)
  
  fits_f1 <- data.frame(matrix(ncol = N_c + 3, nrow = lx))
  colnames(fits_f1) <- c("years", "weeks", cure_strs, "background")
  
  fits_f1[, "weeks"] <- seq(0, lx - 1, by = 1)
  fits_f1[, "years"] <- xty
  fits_f1[, "background"] <- surv_mean
  
  v_leg <- c()
  
  for (j in 1:N_c) {
    obj_ <- opt_obj_f_[[j]]
    len <- length(obj_$par)
    
    St_[[j]] <- do.call(fsr_fits_$dfns$p,
                        args = c(as.list(obj_$par[1:(len)]),
                                 list(q = xty, lower.tail = FALSE)))
    St_base_[[j]] <- do.call(fsr_fits_$dfns$p,
                             args = c(as.list(fsr_fits_$res[, "est"]),
                                      list(q = xty, lower.tail = FALSE)))
    # See Equation 1 in the paper
    y_[[j]] <- surv_mean * (cure_vals[j] + (1 - cure_vals[j]) * St_[[j]])
    
    fits_f1[, cure_strs[j]] <- St_[[j]]
    if ((1 == 1) & (j == 1)) {
      v_leg <- c(v_leg, paste("Parametric"))
      pl_exp <- St_base_[[j]]
    }
    lines(xty, pl_exp, col = "blue", lwd = 2.5, lty = 2)
    lines(xty, y_[[j]], col = colors__[j], lwd = 2.5)
    
    AIC_cures$Model[i] <- models[i]
    AREA_cures$Model[i] <- models[i]
    AIC_cures[i, cure_strs[j]] <- 2 * (length(len)) + 2 * obj_$value
    i10 <- which(xty <= 10)
    AREA_cures[i, cure_strs[j]] <- area_surv(xty, y_[[j]])
    AREA_cures[i, "No_cure"] <- area_surv(xty, St_base_[[j]])
    AREA_cures[i, paste(cure_strs[j],
                        "_res", sep = "")] <- area_surv(xty[i10], y_[[j]][i10])
    AREA_cures[i, "No_cure_res"] <- area_surv(xty[i10], St_base_[[j]][i10])
    v_leg <- c(v_leg, paste("Cure = ", signif(cure_vals[j] * 100, 2), "%"))
  }
  
  lines(fsr_fits_, est = FALSE, ci = FALSE)
  lines(surv_fits_, lwd = 2)
  
  legend("topright",
         c("KM and confidence interval", v_leg),
         col = c("black", "blue", colors__),
         lwd = c(1, rep(2.5, N_c + 1)),
         lty = c(1, 2, rep(1, N_c + 1)), cex = 1.05, ncol = 1)
  
  dev.off()
}
